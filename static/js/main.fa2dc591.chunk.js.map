{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","className","Date","data","timestamp","toLocaleString","Object","entries","stores","map","store","key","id","name","itemsById","sort","items","itemWithNameAndImage","values","find","p","image","href","target","rel","src","height","i","item","stock","url","title","price","Boolean","window","location","hostname","match","rootElement","document","getElementById","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oh1EA0FeA,G,MAtFH,WACV,OACE,oCACE,mDAEE,wCAEF,yBAAKC,UAAU,iBAAf,4BAEE,6BAFF,gBAGgB,IAAIC,KAAKC,EAAKC,WAAWC,eAAe,OAExD,+BACE,+BACE,4BACE,wBAAIJ,UAAU,iBACd,wBAAIA,UAAU,eAAd,WACCK,OAAOC,QAAQJ,EAAKK,QAAQC,KAAI,mCAAOC,GAAP,kBAC/B,wBAAIC,IAAKD,EAAME,IAEZF,EAAMG,WAMf,+BACGP,OAAOC,QAAQJ,EAAKW,WAClBC,MAAK,6DAAmC,GAAK,KAC7CN,KAAI,YAAwB,IAAD,mBAArBE,EAAqB,YAAhBK,OAAgB,MAAR,GAAQ,EACpBC,EAAuBX,OAAOY,OAAOF,GAAOG,MAChD,SAAAC,GAAC,OAAIA,EAAGP,MAAQO,EAAGC,SAErB,OACE,wBAAIV,IAAKA,GACP,wBAAIV,UAAU,gBACZ,uBACEqB,KAAML,EAAsBI,MAC5BE,OAAO,SACPC,IAAI,uBAEJ,yBAAKC,IAAKR,EAAsBI,MAAOK,OAAO,SAGlD,wBAAIzB,UAAU,eAAegB,EAAsBJ,MAClDP,OAAOC,QAAQJ,EAAKK,QAAQC,KAAI,WAAekB,GAAO,IAAD,mBAAdjB,GAAc,WAE9CkB,EAAOZ,EAAMN,EAAME,IAEzB,OAAKgB,EAIH,wBACEjB,IAAKiB,EAAKlB,MACVT,UAAS,uBACP2B,EAAKC,MAAQ,WAAa,iBAG5B,uBACEP,KAAMM,EAAKE,IACXP,OAAO,SACPC,IAAI,sBACJO,MACE,cACuB,kBAAfH,EAAKC,MACTD,EAAKC,MACLD,EAAKC,MACL,MACA,OAGLD,EAAKI,MAbR,SATK,wBAAIrB,IAAKD,EAAME,GAAIX,UAAU,6BC1CtCgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAcC,SAASC,eAAe,QACxCF,GAAeA,EAAYG,gBAC7BC,kBAAQ,kBAAC,EAAD,MAASJ,GAEjBK,iBAAO,kBAAC,EAAD,MAASL,GDiIZ,kBAAmBM,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fa2dc591.chunk.js","sourcesContent":["import React from \"react\";\nimport data from \"./data.json\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <>\n      <h1>\n        X-Wing Stock Checker\n        <sup>âš¡</sup>\n      </h1>\n      <div className=\"update-notice\">\n        Updated every 15 minutes.\n        <br />\n        Last update: {new Date(data.timestamp).toLocaleString(\"sv\")}\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th className=\"column-image\"></th>\n            <th className=\"column-name\">Product</th>\n            {Object.entries(data.stores).map(([key, store]) => (\n              <th key={store.id}>\n                {/* <a href={store.url} target=\"_blank\" rel=\"noopener noreferrer\"> */}\n                {store.name}\n                {/* </a> */}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {Object.entries(data.itemsById)\n            .sort(([keyA], [keyB]) => (keyA > keyB ? 1 : -1))\n            .map(([key, items = {}]) => {\n              const itemWithNameAndImage = Object.values(items).find(\n                p => p!.name && p!.image\n              );\n              return (\n                <tr key={key}>\n                  <td className=\"column-image\">\n                    <a\n                      href={itemWithNameAndImage!.image}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      <img src={itemWithNameAndImage!.image} height=\"30\" />\n                    </a>\n                  </td>\n                  <td className=\"column-name\">{itemWithNameAndImage!.name}</td>\n                  {Object.entries(data.stores).map(([key, store], i) => {\n                    // @ts-ignore\n                    const item = items[store.id];\n\n                    if (!item) {\n                      return <td key={store.id} className=\"column-stock\"></td>;\n                    }\n                    return (\n                      <td\n                        key={item.store}\n                        className={`column-stock ${\n                          item.stock ? \"in-stock\" : \"out-of-stock\"\n                        }`}\n                      >\n                        <a\n                          href={item.url}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          title={\n                            `In Stock: ` +\n                            (typeof item.stock === \"number\"\n                              ? item.stock\n                              : item.stock\n                              ? \"Yes\"\n                              : \"No\")\n                          }\n                        >\n                          {item.price} SEK\n                        </a>\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { hydrate, render } from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement && rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}